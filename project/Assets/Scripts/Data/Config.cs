// Generated by github.com/davyxu/tabtoy
// Version: 3.1.1
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	// Defined in table: Globals
	public enum ActorType
	{
		
		
		Leader = 0, // 唐僧
		
		
		Monkey = 1, // 孙悟空
		
		
		Pig = 2, // 猪八戒
		
		
		Hammer = 3, // 沙僧
	
	}
	
	

	// Defined in table: Config
	
	public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// BattlePlayer
		/// </summary>
		public List<BattlePlayerDefine> BattlePlayer = new List<BattlePlayerDefine>(); 
		
		/// <summary> 
		/// Sample
		/// </summary>
		public List<SampleDefine> Sample = new List<SampleDefine>(); 
	
	
		#region Index code
	 	Dictionary<long, BattlePlayerDefine> _BattlePlayerByid = new Dictionary<long, BattlePlayerDefine>();
        public BattlePlayerDefine GetBattlePlayerByid(long id, BattlePlayerDefine def = default(BattlePlayerDefine))
        {
            BattlePlayerDefine ret;
            if ( _BattlePlayerByid.TryGetValue( id, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BattlePlayerDefine) )
			{
				TableLogger.ErrorLine("GetBattlePlayerByid failed, id: {0}", id);
			}

            return def;
        }
		Dictionary<string, BattlePlayerDefine> _BattlePlayerByname = new Dictionary<string, BattlePlayerDefine>();
        public BattlePlayerDefine GetBattlePlayerByname(string name, BattlePlayerDefine def = default(BattlePlayerDefine))
        {
            BattlePlayerDefine ret;
            if ( _BattlePlayerByname.TryGetValue( name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BattlePlayerDefine) )
			{
				TableLogger.ErrorLine("GetBattlePlayerByname failed, name: {0}", name);
			}

            return def;
        }
		Dictionary<long, SampleDefine> _SampleByID = new Dictionary<long, SampleDefine>();
        public SampleDefine GetSampleByID(long ID, SampleDefine def = default(SampleDefine))
        {
            SampleDefine ret;
            if ( _SampleByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SampleDefine) )
			{
				TableLogger.ErrorLine("GetSampleByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<string, SampleDefine> _SampleByName = new Dictionary<string, SampleDefine>();
        public SampleDefine GetSampleByName(string Name, SampleDefine def = default(SampleDefine))
        {
            SampleDefine ret;
            if ( _SampleByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SampleDefine) )
			{
				TableLogger.ErrorLine("GetSampleByName failed, Name: {0}", Name);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "98caf66a9608d2bf7dac2435fcfe5530";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> _ConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler
		{
			get
			{
				if (_ConfigDeserializeHandler == null )
				{
					_ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
				}

				return _ConfigDeserializeHandler;
			}
		}
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.BattlePlayer.Add( reader.ReadStruct<BattlePlayerDefine>(BattlePlayerDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Sample.Add( reader.ReadStruct<SampleDefine>(SampleDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build BattlePlayer Index
			for( int i = 0;i< ins.BattlePlayer.Count;i++)
			{
				var element = ins.BattlePlayer[i];
				
				ins._BattlePlayerByid.Add(element.id, element);
				
				ins._BattlePlayerByname.Add(element.name, element);
				
			}
			
			// Build Sample Index
			for( int i = 0;i< ins.Sample.Count;i++)
			{
				var element = ins.Sample[i];
				
				ins._SampleByID.Add(element.ID, element);
				
				ins._SampleByName.Add(element.Name, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<Vec2> _Vec2DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler
		{
			get
			{
				if (_Vec2DeserializeHandler == null )
				{
					_Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
				}

				return _Vec2DeserializeHandler;
			}
		}
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec3> _Vec3DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec3> Vec3DeserializeHandler
		{
			get
			{
				if (_Vec3DeserializeHandler == null )
				{
					_Vec3DeserializeHandler = new tabtoy.DeserializeHandler<Vec3>(Deserialize);
				}

				return _Vec3DeserializeHandler;
			}
		}
		public static void Deserialize( Vec3 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Z = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<BattlePlayerDefine> _BattlePlayerDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BattlePlayerDefine> BattlePlayerDefineDeserializeHandler
		{
			get
			{
				if (_BattlePlayerDefineDeserializeHandler == null )
				{
					_BattlePlayerDefineDeserializeHandler = new tabtoy.DeserializeHandler<BattlePlayerDefine>(Deserialize);
				}

				return _BattlePlayerDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BattlePlayerDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.id = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.resPath = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.res3DPath = reader.ReadString();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.soundIdelPath = reader.ReadString();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.soundDiePath = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.soundEnterPath = reader.ReadString();
                	}
                	break; 
                	case 0x90007:
                	{
						ins.posEnter = reader.ReadStruct<Vec3>(Vec3DeserializeHandler);
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Prop> _PropDeserializeHandler;
		static tabtoy.DeserializeHandler<Prop> PropDeserializeHandler
		{
			get
			{
				if (_PropDeserializeHandler == null )
				{
					_PropDeserializeHandler = new tabtoy.DeserializeHandler<Prop>(Deserialize);
				}

				return _PropDeserializeHandler;
			}
		}
		public static void Deserialize( Prop ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.HP = reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.AttackRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.ExType = reader.ReadEnum<ActorType>();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<AttackParam> _AttackParamDeserializeHandler;
		static tabtoy.DeserializeHandler<AttackParam> AttackParamDeserializeHandler
		{
			get
			{
				if (_AttackParamDeserializeHandler == null )
				{
					_AttackParamDeserializeHandler = new tabtoy.DeserializeHandler<AttackParam>(Deserialize);
				}

				return _AttackParamDeserializeHandler;
			}
		}
		public static void Deserialize( AttackParam ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Value = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<SampleDefine> _SampleDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<SampleDefine> SampleDefineDeserializeHandler
		{
			get
			{
				if (_SampleDefineDeserializeHandler == null )
				{
					_SampleDefineDeserializeHandler = new tabtoy.DeserializeHandler<SampleDefine>(Deserialize);
				}

				return _SampleDefineDeserializeHandler;
			}
		}
		public static void Deserialize( SampleDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.EmptyName = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.IconID = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.NumericalRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.BuffID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.Pos = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x80008:
                	{
						ins.Type = reader.ReadEnum<ActorType>();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.SkillID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.AttackParam = reader.ReadStruct<AttackParam>(AttackParamDeserializeHandler);
                	}
                	break; 
                	case 0x9000b:
                	{
						ins.SingleStruct = reader.ReadStruct<Prop>(PropDeserializeHandler);
                	}
                	break; 
                	case 0x9000c:
                	{
						ins.StrStruct.Add( reader.ReadStruct<Prop>(PropDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				BattlePlayer.Clear(); 		
				Sample.Clear(); 
			
				_BattlePlayerByid.Clear(); 
				_BattlePlayerByname.Clear(); 
				_SampleByID.Clear(); 
				_SampleByName.Clear(); 
		}
		#endregion
	

	} 

	// Defined in table: Globals
	
	public partial class Vec2
	{
	
		
		
		public float X = 0f; 
		
		
		public float Y = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class Vec3
	{
	
		
		
		public float X = 0f; 
		
		
		public float Y = 0f; 
		
		
		public float Z = 0f; 
	
	

	} 

	// Defined in table: BattlePlayer
	[System.Serializable]
	public partial class BattlePlayerDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public long id = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string name = ""; 
		
		
		public string resPath = ""; 
		
		
		public string res3DPath = ""; 
		
		
		public string soundIdelPath = ""; 
		
		
		public string soundDiePath = ""; 
		
		
		public string soundEnterPath = ""; 
		
		
		public Vec3 posEnter = new Vec3(); 
	
	

	} 

	// Defined in table: Sample
	[System.Serializable]
	public partial class Prop
	{
	
		
		
		public int HP = 10; // 血量
		
		
		public float AttackRate = 0f; // 攻击速率
		
		
		public ActorType ExType = ActorType.Leader; // 额外类型
	
	

	} 

	// Defined in table: Sample
	[System.Serializable]
	public partial class AttackParam
	{
	
		
		
		public int Value = 0; // 攻击值
	
	

	} 

	// Defined in table: Sample
	[System.Serializable]
	public partial class SampleDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public long ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		
		public string EmptyName = ""; 
		
		/// <summary> 
		/// 图标ID
		/// </summary>
		public int IconID = 0; 
		
		/// <summary> 
		/// 攻击率
		/// </summary>
		public float NumericalRate = 0f; 
		
		/// <summary> 
		/// 物品id
		/// </summary>
		public int ItemID = 100; 
		
		/// <summary> 
		/// BuffID
		/// </summary>
		public List<int> BuffID = new List<int>(); 
		
		/// <summary> 
		/// 位置
		/// </summary>
		public Vec2 Pos = new Vec2(); 
		
		/// <summary> 
		/// 类型
		/// </summary>
		public ActorType Type = ActorType.Leader; 
		
		/// <summary> 
		/// 技能ID列表
		/// </summary>
		public List<int> SkillID = new List<int>(); 
		
		/// <summary> 
		/// 攻击参数
		/// </summary>
		public AttackParam AttackParam = new AttackParam(); 
		
		/// <summary> 
		/// 单结构解析
		/// </summary>
		public Prop SingleStruct = new Prop(); 
		
		/// <summary> 
		/// 字符串结构
		/// </summary>
		public List<Prop> StrStruct = new List<Prop>(); 
	
	

	} 

}
